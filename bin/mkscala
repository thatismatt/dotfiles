#!/usr/bin/env bash

SCALA_VERSION="2.10.6"
PACKAGEROOT="com.example"

# TODO: Remove trailing slash from name
NAME=$1
CLASSNAME=`sed -e 's/-\([a-z]\)/\U\1/g' <<< ${NAME^}` # hyphenated to camelcase
PACKAGE=$PACKAGEROOT.${NAME//-}
MAIN=$NAME/src/main
SRC=$MAIN/scala
RES=$MAIN/resources
PRJ=$NAME/project
BUILD=$PRJ/Build.scala
BUILDUTILS=$PRJ/Utils.scala
MAINCLASS=$SRC/Main.scala
LIBNAME=lib
LIBCLASS=$SRC/${LIBNAME^}.scala
APPCONF=$RES/application.conf

echo "### MKSCALA ###"
echo "Creating $NAME"

mkdir -p $SRC
mkdir -p $RES
mkdir -p $PRJ

cat > $BUILD <<EOF
import sbt._
import sbt.Keys._

object ${CLASSNAME}Build extends Build {

  object B {
    val name = "$NAME"
    val version = "0.0.1"
  }

  lazy val root = Project(id = B.name, base = file("."))
    .settings(
      name := B.name,
      version := B.version,
      scalaVersion := "$SCALA_VERSION",
      scalacOptions ++= Seq("-feature", "-deprecation"),
      javaOptions in run += "-Xmx4G",
      javaOptions in Test ++= Seq("-Xms1G", "-Xmx4G"),
      javacOptions in compile ++= Seq("-source", "1.7", "-target", "1.7", "-g"),
      libraryDependencies ++= Seq(
        "com.typesafe" % "config" % "1.2.0",
        "ch.qos.logback" % "logback-classic" % "1.0.13",
        "com.typesafe" %% "scalalogging-slf4j" % "1.1.0"
      ),
      resolvers ++= Seq(
        Resolver.typesafeRepo("releases"),
        Resolver.typesafeRepo("snapshots"),
        Resolver.sonatypeRepo("releases"),
        Resolver.sonatypeRepo("snapshots")),
      fork in Test := false,
      shellPrompt := Utils.shellPrompt)
}
EOF

cat > $BUILDUTILS <<EOF
import sbt._

object Utils {
  val shellPrompt = {
    (state: State) => {
      val currProject = Project.extract(state).currentProject.id
      "%s%s%s: ".format(scala.Console.CYAN, currProject, scala.Console.RESET)
    }
  }
}
EOF

cat > $MAINCLASS <<EOF
package $PACKAGE

object Main {
  def main(args: Array[String]) {
    val $LIBNAME = ${LIBNAME^}.load
    println("Hello World!")
    println(s"This is \$this")
    $LIBNAME.start
  }
}
EOF

cat > $LIBCLASS <<EOF
package $PACKAGE

import com.typesafe.config.{Config, ConfigFactory}

object ${LIBNAME^} {
  def load = {
    val config = ConfigFactory.load()
    val ${LIBNAME}Config = config.getConfig("$NAME.$LIBNAME")
    new ${LIBNAME^}(${LIBNAME}Config)
  }
}

class ${LIBNAME^}(config: Config) {

  val greeting = config.getString("greeting")

  def start {
    println(s"\$greeting World!")
    println(s"This is \$this")
  }
}
EOF

cat > $APPCONF <<EOF
$NAME {
  $LIBNAME {
    greeting = "Hi"
  }
}
EOF

cd $NAME

sbt run
